/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package admin;

import classes.ScrollBar;
import connection.connect1;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;






/**
 *
 * @author gardh
 */
public class OrderManagementPanel extends javax.swing.JPanel {

  Connection con;
  PreparedStatement pst;
  ResultSet rs;
  
  private String status = "";
    
    
    public OrderManagementPanel() {
        initComponents();
        con = connect1.con();
        
        scrollpane1.setVerticalScrollBar(new ScrollBar());
        UpdateBtn.setEnabled(false);
        deleteBtn.setEnabled(false);
        
        try {
            pst = con.prepareCall("SELECT tbl_orders.order_id, tbl_customer.fullname, tbl_orders.order_date, tbl_orders.total_amount ,tbl_orders.Status "
                    + "FROM tbl_orders INNER JOIN tbl_customer ON tbl_orders.customer_id = tbl_customer.customer_id;");
          
            rs =  pst.executeQuery();
              
              while(rs.next()){
            Object[] rowdata = new Object[5];
            
            for(int i = 0; i < 5; i++){
            
                rowdata[i] =rs.getObject(i+1);
            
            }
            table1.addRow(rowdata);
            
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
       
        
        ListSelectionModel selectionModel = table1.getSelectionModel();
        selectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        selectionModel.addListSelectionListener(new ListSelectionListener() {
    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) { // To avoid multiple events being fired
            boolean rowSelected = table1.getSelectedRow() != -1;

            // Enable/disable the buttons based on row selection
            UpdateBtn.setEnabled(rowSelected);
            deleteBtn.setEnabled(rowSelected);
            clearBtn.setEnabled(!rowSelected);
        
       
        
           
        }
        
        
    }
});
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBorder1 = new Panel.panelBorder();
        scrollpane1 = new javax.swing.JScrollPane();
        table1 = new classes.Table();
        jLabel1 = new javax.swing.JLabel();
        statusCombobx = new javax.swing.JComboBox<>();
        clearBtn = new classes.Button();
        deleteBtn = new classes.Button();
        UpdateBtn = new classes.Button();
        orderidtxt = new javax.swing.JTextField();

        setBackground(new java.awt.Color(242, 242, 242));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        panelBorder1.setBackground(new java.awt.Color(255, 255, 255));

        scrollpane1.setBorder(null);

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Costumer Name", "Order Date", "Amount", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollpane1.setViewportView(table1);

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("ORDER MANAGEMENT");

        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1.setLayout(panelBorder1Layout);
        panelBorder1Layout.setHorizontalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(scrollpane1, javax.swing.GroupLayout.DEFAULT_SIZE, 935, Short.MAX_VALUE)
                .addGap(1, 1, 1))
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelBorder1Layout.setVerticalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollpane1, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                .addContainerGap())
        );

        statusCombobx.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        statusCombobx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT", "CANCELED", "SHIPPING", "DELIVERED" }));
        statusCombobx.setBorder(null);
        statusCombobx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusCombobxActionPerformed(evt);
            }
        });

        clearBtn.setBackground(new java.awt.Color(249, 106, 6));
        clearBtn.setText("CLEAR");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(248, 49, 9));
        deleteBtn.setText("DELETE ORDER");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        UpdateBtn.setBackground(new java.awt.Color(16, 171, 9));
        UpdateBtn.setText("UPDATE ORDER");
        UpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnActionPerformed(evt);
            }
        });

        orderidtxt.setEditable(false);
        orderidtxt.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(panelBorder1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
            .addGroup(layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(UpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(statusCombobx, 0, 222, Short.MAX_VALUE)
                            .addComponent(orderidtxt))
                        .addGap(201, 201, 201))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelBorder1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(orderidtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(statusCombobx, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(UpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(134, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void statusCombobxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusCombobxActionPerformed

        switch (statusCombobx.getSelectedIndex()) {
            case 1:
            status = statusCombobx.getSelectedItem().toString();
            break;
            case 2:
            status = statusCombobx.getSelectedItem().toString();
            break;
            case 3:
            status = statusCombobx.getSelectedItem().toString();
            break;

            default:
            status ="";
            break;
        }

    }//GEN-LAST:event_statusCombobxActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
      
            int confirmation = JOptionPane.showConfirmDialog(
        null, "Are you sure you want to delete this order from the table?", "Confirm", JOptionPane.YES_NO_OPTION
    );

    if (confirmation == JOptionPane.YES_OPTION) {
        deleteTableData();
        loadDatafromDataBase(); 
    } 
        
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
      
        table1.clearSelection();
    }//GEN-LAST:event_formMouseClicked

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
           
        int confirmation = JOptionPane.showConfirmDialog(
        null, "Are you sure you want to Clear the data from the table?", "Confirm", JOptionPane.YES_NO_OPTION
    );

    if (confirmation == JOptionPane.YES_OPTION) {
        clearTableData();
        loadDatafromDataBase(); 
    } 
        
    }//GEN-LAST:event_clearBtnActionPerformed

    private void UpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnActionPerformed

        if (UpdateBtn.getText().equals("UPDATE ORDER")) {
            int selectedrow  =table1.getSelectedRow();
             if (selectedrow != -1) {
                 Object[] rowData = new Object[5];

             for (int i = 0; i < 5; i++) {
                rowData[i] =  table1.getValueAt(selectedrow, i);
                 }
                      orderidtxt .setText(rowData[0].toString());
                        
             
                     if(rowData[4].toString().equals("CANCELLED")){
                            statusCombobx.setSelectedIndex(1);
                     }
                     else if(rowData[4].toString().equals("DELIVERED")){
                              statusCombobx.setSelectedIndex(2);
                     }
                     else if(rowData[4].toString().equals("SHIPPING")){
                              statusCombobx.setSelectedIndex(3);
                     }
                  
    
   
        }
             UpdateBtn.setText("SAVE ORDER");
     
     table1.setEnabled(false);
     table1.setFocusable(false);
            
        } else if(UpdateBtn.getText().equals("SAVE ORDER")){
            
            int orderid = Integer.parseInt(orderidtxt.getText());
            
            if (!status.isBlank()) {
                
                updateTable(status, orderid);
                 loadDatafromDataBase();
                 
                 orderidtxt.setText("");
                 statusCombobx.setSelectedIndex(0);
                
                table1.setEnabled(true);
     table1.setFocusable(true);
     
     UpdateBtn.setText("UPDATE ORDER");
     UpdateBtn.setEnabled(false);
     
                
            } else {
                JOptionPane.showMessageDialog(null,"Select status order.");
            }
            
            
        }
    }//GEN-LAST:event_UpdateBtnActionPerformed

   
  private void clearTableData() {
    String sql = "DELETE FROM tbl_orders";
    
    try (PreparedStatement statement = con.prepareStatement(sql)) {
        statement.executeUpdate();
        JOptionPane.showMessageDialog(null, "All data cleared from the table.");
        
        // Refresh the table after clearing data
        loadDatafromDataBase();
    } catch (SQLException ex) {
        Logger.getLogger(Inventory.class.getName()).log(Level.SEVERE, null, ex);
    }
}  
    
  

private void updateTable(String status, int id) {
    String sql = "UPDATE `tbl_orders` SET `status`= ? where order_id = ?" ;
    try (PreparedStatement statement = con.prepareStatement(sql)) {
        statement.setString(1, status);
        statement.setInt(2, id);
        
        statement.executeUpdate();
    }catch(Exception e ){}

}
    
private void deleteTableData(){

      int selectedRow = table1.getSelectedRow();

              
                    // Extract information from the selected row
                    int orderId = (int) table1.getValueAt(selectedRow, 0);

                    // Construct the SQL DELETE statement
                    String sql = "DELETE FROM tbl_orders WHERE order_id = ?";

                    try (PreparedStatement statement = con.prepareStatement(sql)) {
                        // Set the parameter in the DELETE statement
                        statement.setInt(1, orderId);

                        // Execute the DELETE statement
                        statement.executeUpdate();

                        // Remove the selected row from the JTable model
                        DefaultTableModel model = (DefaultTableModel) table1.getModel();
                        model.removeRow(selectedRow);

                      
       
                    
                    } catch (SQLException ex) {
                        Logger.getLogger(Inventory.class.getName()).log(Level.SEVERE, null, ex);
                    }


}
    
  private void loadDatafromDataBase(){
     
         con = connect1.con();
         
         DefaultTableModel model = (DefaultTableModel) table1.getModel();
         model.setRowCount(0);
         
           try {
            pst = con.prepareCall("SELECT tbl_orders.order_id, tbl_customer.fullname, tbl_orders.order_date, tbl_orders.total_amount ,tbl_orders.Status "
                    + "FROM tbl_orders INNER JOIN tbl_customer ON tbl_orders.customer_id = tbl_customer.customer_id; ");
            rs = pst.executeQuery();
            
            while(rs.next()){
            Object[] rowdata = new Object[5];
            
            for(int i = 0; i < 5; i++){
            
                rowdata[i] =rs.getObject(i+1);
            
            }
            model.addRow(rowdata);
            
            }
        } catch (SQLException ex) {
            Logger.getLogger(DashboardPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
         
     }  
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private classes.Button UpdateBtn;
    private classes.Button clearBtn;
    private classes.Button deleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField orderidtxt;
    private Panel.panelBorder panelBorder1;
    private javax.swing.JScrollPane scrollpane1;
    private javax.swing.JComboBox<String> statusCombobx;
    private classes.Table table1;
    // End of variables declaration//GEN-END:variables
}
